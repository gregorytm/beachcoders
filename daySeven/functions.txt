FUNCTIONS

//central to the language
//must be able to read functions
//very crutal to jS as a language
//a lot of options and things we can do with functions

//What is a function?
//it is a reusable procedure or chunk of code
//lets us write reusable, and modular code
//we write code that we can recall and execute when needed rather then right away
/we use them everywhere
//examples get fantisy team, chess.com or reddit get user go search
//they are like little macheans we can turn on and off

two step process for a function
first is to define one, write the code of what it should do
next is to exicute or run the code, tell the browser "hey run this funciton now"  write it and run it
we have been running functions(calling them methods, there is a difference we will address later) using ()

//in console
"hello world".toUpperCase()//thats a method we will call a function
//we have been using functions but not defining our own
//a few different ways to write them but they usually consist of same elements
//function declaration
//name must be a valid identifier, no reserved keywords
function funcName() {
  //do something
}

function jukeBox(){
  console.log('Road shimmer');
  console.log('wigglin/' the vision');
  console.log('im swimming in a mirror')
}//so everyitme we exicute jukeBox it will give us or song
//not very useful but its our first function!
//we can exicute 3 times but calling it 3 times or by using a loop
jukeBox();
jukeBox();
jukeBox();

for(let i =0; i <= 20; i++){
  console.log(jukeBox());
}

function ddDice() {
  let roll = Math.floor(Math.random() *12) +1;
  console.log(`Dice roll ${roll}`)
}

function defensiveRolls(){
  ddDice()
  ddDice()
  ddDice()
  ddDice()
}

FUNCTION ARGUMENTS:
function data passed into it
.toUpperCase() Math.pie()
example that does take an arguments
"hello world".indexOf('e')

to make a func expect arguments u just add a var name in the ();

function greet() {
  console.log("Hello World')
}

function greet(name) {
  console.log(name)
  console.log(`hello ${name})
}

function diceRolls(diceRolls){
  for(let i=0; i< nulRolls; i++){
    ddDice()
  }
}

function square(num){
  console.log(num * num);
}
//the word or number we pass in is the actual number
//when defining a function we call it paramiter

function sum(x,y) {
  console.log(x+y);
}
//order does not mater


function divide(x,y) {
  console.log(a/b);
}
//order does mater
//try puting a letter instead of a number
//try just passing in one number
//if value is missing it becomes undefined

RETURN 
currently we are just printing a number and not returning 
'hello'.toUpperCase() in the text editor
that code runs but then we lose it forever
if we want to caputre it we need to use a var
const greet = "hello".toUpperCase();
printing to console is not the same as returning
run code in console "hello".toUpperCase();
run in console console.log("hello".toUpperCase())
it returns undefined

most webpages wont have anything printed in console.lo unless:
a dev forgot to remove it
or warnings (ex facebook)

//in console
const num = divide(1,2)//returns undefined
there is no value, it prints to console but we have no output
to get a return we use the return keyword

//in txt editor
function divide(x,y) {
  return(a/b);
}

//in console
const total = divide(1/2)

alwasy need to return one value
if u need multipe things u can return an array, object or maybe a string but it must be one thing
return statements end function exicution, similar to break

function square(x) {
  return x * x
  console.log("test test);
}

//we can use this to our advantage
luckyNumber(num){
  if(num === 12){
    return true
  }
  else {
    return false
  }
}
//how can we rewrite func?
//remve the else and just {}
//less key strokes

//we could also rewrite it into one line
function luckyNumber(num) {
  return num === 12;
}

function favSnack(snack){
  return snack.toLowerCase() === 'cheezeits';
}

//do u remember the or operator
//where should we put return false?
function favSnack(arr){
  for(let snack of snacks) {
    if(snack === 'cheezeits' || snack ==='beefjerkey') {
      return true
    }
  }
  return false
}
//whenever we return, the function is over, even if its nested

Quiz questions:
Write a function passwordCheck
have it accept two arguments: username and password
password needs to be:
-at least 10 characters long
-cannot contain spaces
-cannot contain the username
if all checks pass, return true
else return false


//multipe ways to do it
function passwordCheck(username, password){
  if(password.length < 10){
    return false
  }
  if(password.indexOf(" ") !== -1){
    return false;
  }
  if(password.indexOf(username) !== -1){
    return false;
  }
  return true
}

//we could use use else if and else but we dont need to
//we can rewrite using OR
//could also rewrite using variables
//could also rewrite using not and AND
//can rewrite many times over
//writing the shorting amount of code is not alwasy best

MORE FUNCTION DETAILS
what is javaScript scope

it is the visability of variables 

depending on where we define our variables determins where we can access them.

function scopeTest() {
  let idea = "sell small drink unbrellas";
  console.log("1--",idea)
}
  console.log("2--",idea)

  function scopeTest() {
  let idea = "open a juiceBar";
  console.log("3--",idea)
}
  console.log("4--",idea)

lets us have a lot of functions with the same var name;
lets get an error

let idea ="any message"
let idea = "any message"
the error tells us hi has already been defined in this current scope

Quiz question1:
let greeting="hello"

function greeting() {
  const greeting="hello"
}

Question2:
const flavor="vanilla"
console.log(flavor)

function iceCreamTruck() {
  let flavor="chocolate"
}
iceCreamTruck();
console.log(flavor)

using VAR
keep in mind object{} is different then object{}
scopeTest() {
  let flavor = "chocolate"
}
console.log (flavor);

scopeTest() {
  var flavor = "chocolate"
}
console.log (flavor);
writing functions with var was very difficult
let flavors = ['chocolate' 'cherry', 'vanilla']
for (var i=0; i<flavors.length; i++) {
  console.log(i)
}
console.log(i)

Quiz
function doubleNums(arr) {
  const numbers=[];
  for(let num of numbers) {
    let result = num * 2;
    result.push(double);
  }
  console.log(double);
  return numbers;
}

how can we change to have access to double after function runs?

function doubleNums(arr) {
  const numbers=[];
  let result;
  for(let num of numbers) {
    let result = num * 2;
    result.push(double);
  }
  console.log(double);
  return numbers;
}

function outerFunc() {
  let flavor="vanilla";

  function iceCreamTruck() {
    console.log(flavor.toUpperCase())
  }
  flavor()
}
we can access flavors in the iceCreamTruck
run iceCreamTruck in the console
no access
nested functions have access to any vars in parent functions

function outerFunc() {
  let flavor="vanilla";

  function iceCreamTruck() {
    let flavor="chocolate
    console.log(flavor.toUpperCase())
  }
  console.log(flavor)
}

seems silly in normal jS but when u get to react its everywhere

FUNCTION expression
so far we have been defining functions with the function keyword
function expression assigns it to a variable

const flavor = function(iceCream) {
  return iceCream.toUpperCase();
}
flavor("vanilla")


function add(a,b) {
  return a + b;
}

const add = function(a,b) {
  return a + b
}
run in console

const add = function sum(a,b) {
  return a=b
}
run in console add() and sum()
this means we can pass them around as arguments
